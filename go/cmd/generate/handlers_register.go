package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type HandlerInfo struct {
	Name string
}

type TemplateData struct {
	Handlers []HandlerInfo
}

const registerTemplate = `// Code generated by make go_build_register; DO NOT EDIT.
package handlers

func (h *Handlers) registerHandlers() {
	{{- range .Handlers }}
	h.Functions["{{ .Name }}"] = Register(h.{{ .Name }})
	{{- end }}
}
`

func main() {
	// Get current working directory
	pwd, err := os.Getwd()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error getting working directory: %v\n", err)
		os.Exit(1)
	}

	// Path to handlers directory
	handlersDir := filepath.Join(pwd, "pkg", "handlers")

	// Extract package name and find handler functions
	fset := token.NewFileSet()
	packages, err := parser.ParseDir(fset, handlersDir, nil, 0)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing handlers directory: %v\n", err)
		os.Exit(1)
	}

	var data TemplateData

	for _, pkg := range packages {

		for _, file := range pkg.Files {
			if strings.HasSuffix(file.Name.String(), "register.go") {
				continue
			}

			for _, decl := range file.Decls {
				funcDecl, ok := decl.(*ast.FuncDecl)
				if !ok || funcDecl.Recv == nil {
					continue
				}

				if len(funcDecl.Recv.List) == 0 {
					continue
				}

				starExpr, ok := funcDecl.Recv.List[0].Type.(*ast.StarExpr)
				if !ok {
					continue
				}

				ident, ok := starExpr.X.(*ast.Ident)
				if !ok || ident.Name != "Handlers" {
					continue
				}

				if funcDecl.Type.Params != nil && len(funcDecl.Type.Params.List) == 2 {
					protoParam := funcDecl.Type.Params.List[1]

					isProtoMessage := false

					if starExpr, ok := protoParam.Type.(*ast.StarExpr); ok {
						if sel, ok := starExpr.X.(*ast.SelectorExpr); ok {
							if ident, ok := sel.X.(*ast.Ident); ok && ident.Name == "types" {
								isProtoMessage = true
							}
						}
					}

					if isProtoMessage {
						data.Handlers = append(data.Handlers, HandlerInfo{
							Name: funcDecl.Name.Name,
						})
					}
				}
			}
		}
	}

	registerGoPath := filepath.Join(handlersDir, "register.go")
	file, err := os.Create(registerGoPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error creating register.go: %v\n", err)
		os.Exit(1)
	}
	defer file.Close()

	tmpl, err := template.New("register").Parse(registerTemplate)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing template: %v\n", err)
		os.Exit(1)
	}

	err = tmpl.Execute(file, data)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error executing template: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Successfully generated %s with %d handlers\n", registerGoPath, len(data.Handlers))
}
