package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/keybittech/awayto-v3/go/pkg/util"
)

type HandlerInfo struct {
	Name string
}

type TemplateData struct {
	Handlers []HandlerInfo
}

const registerTemplate = `// Code generated by make handlers_register; DO NOT EDIT.
package api

import "github.com/keybittech/awayto-v3/go/pkg/handlers"

func registerHandlers(h *handlers.Handlers) {
	{{- range .Handlers }}
	h.Functions["{{ .Name }}"] = registerProtoHandler(h.{{ .Name }})
	{{- end }}
}
`

// Loop through all the handler files, ensure the func signature
// collect all elements into a callable function which will assign
// the runtime funcs to the API
func main() {
	fset := token.NewFileSet()

	handlersPath := strings.TrimSpace(filepath.Join(os.Getenv("PROJECT_DIR"), os.Getenv("GO_HANDLERS_DIR"))) + "/"

	packages, err := parser.ParseDir(fset, handlersPath, nil, 0)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing handlers directory: %v\n", err)
		os.Exit(1)
	}

	var data TemplateData

	for _, pkg := range packages {

		for _, file := range pkg.Files {
			if strings.HasSuffix(file.Name.String(), "register.go") {
				continue
			}

			for _, decl := range file.Decls {
				funcDecl, ok := decl.(*ast.FuncDecl)
				if !ok || funcDecl.Recv == nil {
					continue
				}

				if len(funcDecl.Recv.List) == 0 {
					continue
				}

				starExpr, ok := funcDecl.Recv.List[0].Type.(*ast.StarExpr)
				if !ok {
					continue
				}

				ident, ok := starExpr.X.(*ast.Ident)
				if !ok || ident.Name != "Handlers" {
					continue
				}

				if funcDecl.Type.Params != nil && len(funcDecl.Type.Params.List) == 2 {
					protoParam := funcDecl.Type.Params.List[1]

					isProtoMessage := false

					if starExpr, ok := protoParam.Type.(*ast.StarExpr); ok {
						if sel, ok := starExpr.X.(*ast.SelectorExpr); ok {
							if ident, ok := sel.X.(*ast.Ident); ok && ident.Name == "types" {
								isProtoMessage = true
							}
						}
					}

					if isProtoMessage {
						data.Handlers = append(data.Handlers, HandlerInfo{
							Name: funcDecl.Name.Name,
						})
					}
				}
			}
		}
	}

	file, err := util.GetCleanPath(os.Getenv("GO_HANDLERS_REGISTER"), os.O_CREATE)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error cleaning register.go: %v\n", err)
		os.Exit(1)
	}
	defer file.Close()

	tmpl, err := template.New("register").Parse(registerTemplate)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing template: %v\n", err)
		os.Exit(1)
	}

	err = tmpl.Execute(file, data)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error executing template: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Successfully generated %s with %d handlers\n", os.Getenv("GO_HANDLERS_REGISTER"), len(data.Handlers))
}
